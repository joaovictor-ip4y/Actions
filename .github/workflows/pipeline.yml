name: Pipeline

on:
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest

    env:
      CONTAINER_SQLSERVER_NAME: "sqlserver"
      MSSQL_SA_PASSWORD: "4Dm1n@GitHub2024!"
      WWWGROUP: "1000"

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: xdebug, pdo_sqlsrv, sqlsrv

      - name: Install SQLSRV Extensions
        run: |
          sudo apt-get update
          sudo apt-get install -y unixodbc-dev
          sudo pecl install sqlsrv pdo_sqlsrv
          echo "extension=sqlsrv.so" | sudo tee -a $(php -i | grep 'Loaded Configuration' | sed -E 's/.* => //')
          echo "extension=pdo_sqlsrv.so" | sudo tee -a $(php -i | grep 'Loaded Configuration' | sed -E 's/.* => //')

      - name: Run Docker
        run: docker compose up -d

      - name: Ensure WWWGROUP is set
        run: echo "WWWGROUP=1000" >> $GITHUB_ENV

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Wait for SQL Server to be ready
        run: |
          for i in {1..50}; do
            if docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ env.MSSQL_SA_PASSWORD }}" -Q "SELECT 1"; then
              echo "SQL Server está pronto!"
              break
            fi
            echo "Esperando SQL Server ficar pronto... Tentativa $i"
            sleep 2
          done

      - name: Check if app_back container is running
        run: |
          if [ "$(docker ps -q -f name=app_back)" = "" ]; then
            echo "O contêiner app_back não está rodando. Verifique os logs:"
            docker logs app_back
            exit 1
          fi

      - name: Generate key
        run: docker exec -it app_back php artisan key:generate

      - name: Run migration
        run: docker exec -it app_back php artisan migrate --env=testing

      - name: Run PHPUnit tests with coverage
        run: docker exec -it app_back vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=junit.xml

      - name: Extract coverage
        id: coverage_check
        run: |
          COVERAGE=$(php -r "
              libxml_use_internal_errors(true);
              \$xml = simplexml_load_file('coverage.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo coverage.xml';
                  exit(1);
              }
              \$coverage = (\$xml->project->metrics['coveredelements'] / \$xml->project->metrics['elements']) * 100;
              echo round(\$coverage, 2);
          ")
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Cobertura calculada: $COVERAGE%"

      - name: Parse junit.xml
        id: parse_junit
        run: |
          TESTS=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (int) \$xml->testsuite['tests'];
          ")
          FAILURES=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (int) \$xml->testsuite['failures'];
          ")
          SKIPPED=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (int) \$xml->testsuite['skipped'];
          ")
          TIME=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (float) \$xml->testsuite['time'];
          ")

          echo "total_tests=$TESTS" >> $GITHUB_ENV
          echo "failures=$FAILURES" >> $GITHUB_ENV
          echo "skipped=$SKIPPED" >> $GITHUB_ENV
          echo "execution_time=$TIME" >> $GITHUB_ENV

      - name: Post test results
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ env.PAT_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### PHPUnit Test Coverage Report 

            - **Total Coverage:** ${{ env.COVERAGE }}%
            - **Total Tests:** ${{ env.total_tests }}
            - **Failures:** ${{ env.failures }}
            - **Skipped:** ${{ env.skipped }}
            - **Execution Time:** ${{ env.execution_time }} seconds

      - name: Validate test failures
        if: always()
        run: |
          if [ ${{ env.failures }} -gt 0 ]; then
              echo "Existem falhas nos testes: ${{ env.failures }}"
              exit 1
          fi
